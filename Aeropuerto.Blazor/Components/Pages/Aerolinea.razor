@page "/aerolineas"
@using EM = Aeropuerto.EntityModels
@inject AerolineaService AerolineaService
<h3 class="mb-3">Aerolíneas</h3>

<div class="d-flex justify-content-between align-items-center mb-3">
    <div class="input-group w-auto">
        <span class="input-group-text">Buscar</span>
        <input class="form-control" placeholder="Nombre o país..." @bind="filtro" />
    </div>
    <div class="d-flex gap-2">
        <button class="btn btn-primary" @onclick="Nueva">Nueva aerolínea</button>
        <button class="btn btn-outline-secondary" @onclick="CargarAsync">Recargar</button>
    </div>
</div>

@if (!string.IsNullOrWhiteSpace(mensaje))
{
    <div class="alert @alertClase py-2 mb-3">@mensaje</div>
}

<div class="row g-3">
    <div class="col-lg-8">
        <div class="card">
            <div class="table-responsive">
                <table class="table table-hover table-sm mb-0">
                    <thead class="table-light">
                        <tr>
                            <th>Nombre</th>
                            <th>País</th>
                            <th>Año</th>
                            <th>Teléfono</th>
                            <th>Email</th>
                            <th>Estado</th>
                            <th style="width:160px;">Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (listaFiltrada.Any())
                        {
                            @foreach (var a in listaFiltrada)
                            {
                                <tr>
                                    <td>@a.Nombre</td>
                                    <td>@a.PaisOrigen</td>
                                    <td>@(a.AñoFundacion?.ToString() ?? "-")</td>
                                    <td>@(string.IsNullOrWhiteSpace(a.Telefono) ? "-" : a.Telefono)</td>
                                    <td>@(string.IsNullOrWhiteSpace(a.Email) ? "-" : a.Email)</td>
                                    <td>
                                        @if (a.Estado == true)
                                        {
                                            <span class="badge bg-success">Activa</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">Inactiva</span>
                                        }
                                    </td>
                                    <td>
                                        <div class="btn-group btn-group-sm" role="group">
                                            <button class="btn btn-outline-primary" title="Editar" @onclick="() => Editar(a)">Editar</button>
                                            <button class="btn btn-outline-danger" title="Eliminar" @onclick="() => ConfirmarEliminar(a)">Eliminar</button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="7" class="text-center text-muted py-4">Sin resultados</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div class="col-lg-4">
        <div class="card">
            <div class="card-header">
                @(editando ? "Editar aerolínea" : "Nueva aerolínea")
            </div>
            <div class="card-body">
                <EditForm Model="modelo"
                          OnValidSubmit="GuardarAsync"
                          formname="form-aerolinea">

                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-2">
                        <label class="form-label">Nombre</label>
                        <InputText class="form-control" @bind-Value="modelo.Nombre" required />
                    </div>

                    <div class="mb-2">
                        <label class="form-label">País de origen</label>
                        <InputText class="form-control" @bind-Value="modelo.PaisOrigen" required />
                    </div>

                    <div class="mb-2">
                        <label class="form-label">Año de fundación</label>
                        <InputNumber class="form-control" @bind-Value="modelo.AñoFundacion" TValue="int?" />
                    </div>

                    <div class="mb-2">
                        <label class="form-label">Sitio web</label>
                        <InputText class="form-control" @bind-Value="modelo.SitioWeb" />
                    </div>

                    <div class="mb-2">
                        <label class="form-label">Teléfono</label>
                        <InputText class="form-control" @bind-Value="modelo.Telefono" />
                    </div>

                    <div class="mb-2">
                        <label class="form-label">Email</label>
                        <InputText class="form-control" @bind-Value="modelo.Email" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Dirección</label>
                        <InputText class="form-control" @bind-Value="modelo.Direccion" />
                    </div>

                    <div class="form-check form-switch mb-3">
                        <InputCheckbox class="form-check-input" @bind-Value="modelo.Estado" />
                        <label class="form-check-label">Activa</label>
                    </div>


                    <div class="d-flex gap-2">
                        <button type="submit" class="btn btn-success">Guardar</button>
                        <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@if (aEliminar is not null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,.4);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header"><h5 class="modal-title">Confirmar eliminación</h5></div>
                <div class="modal-body">
                    ¿Eliminar la aerolínea "<strong>@aEliminar.Nombre</strong>"?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => aEliminar = null">Cancelar</button>
                    <button class="btn btn-danger" @onclick="EliminarAsync">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<EM.Aerolinea> lista = new();
    private string filtro = string.Empty;
    private EM.Aerolinea modelo = new();
    private EM.Aerolinea? aEliminar;
    private bool editando = false;
    private string mensaje = string.Empty;
    private string alertClase = "alert-info";

    private IEnumerable<EM.Aerolinea> listaFiltrada =>
        string.IsNullOrWhiteSpace(filtro)
          ? lista
          : lista.Where(a =>
                (a.Nombre?.Contains(filtro, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (a.PaisOrigen?.Contains(filtro, StringComparison.OrdinalIgnoreCase) ?? false));

    protected override async Task OnInitializedAsync()
    {
        await CargarAsync();
    }

    private async Task CargarAsync()
    {
        try
        {
            var resultado = await AerolineaService.GetAllAsync();
            lista = resultado ?? new();
        }
        catch (Exception ex)
        {
            Notificar($"Error cargando aerolíneas: {ex.Message}", "alert-danger");
        }
    }

    private void Nueva()
    {
        modelo = new EM.Aerolinea
        {
            Estado = true
        };
        editando = false;
    }

    private void Editar(EM.Aerolinea a)
    {
        modelo = new EM.Aerolinea
        {
            IdAerolinea = a.IdAerolinea,
            Nombre = a.Nombre,
            PaisOrigen = a.PaisOrigen,
            AñoFundacion = a.AñoFundacion,
            SitioWeb = a.SitioWeb,
            Telefono = a.Telefono,
            Email = a.Email,
            Direccion = a.Direccion,
            Estado = a.Estado
        };
        editando = true;
    }

    private void Cancelar()
    {
        modelo = new EM.Aerolinea();
        editando = false;
    }

    private async Task GuardarAsync()
    {
        try
        {
            bool ok = editando
              ? await AerolineaService.UpdateAsync(modelo)
              : await AerolineaService.CreateAsync(modelo);

            if (ok)
            {
                Notificar("Guardado correctamente", "alert-success");
                await CargarAsync();
                Cancelar();
            }
            else
            {
                Notificar("No se pudo guardar", "alert-warning");
            }
        }
        catch (Exception ex)
        {
            Notificar($"Error al guardar: {ex.Message}", "alert-danger");
        }
    }

    private void ConfirmarEliminar(EM.Aerolinea a) => aEliminar = a;

    private async Task EliminarAsync()
    {
        if (aEliminar is null) return;

        try
        {
            var ok = await AerolineaService.DeleteAsync(aEliminar.IdAerolinea);
            if (ok)
            {
                Notificar("Eliminada correctamente", "alert-success");
                await CargarAsync();
            }
            else
            {
                Notificar("No se pudo eliminar", "alert-warning");
            }
        }
        catch (Exception ex)
        {
            Notificar($"Error al eliminar: {ex.Message}", "alert-danger");
        }
        finally
        {
            aEliminar = null;
        }
    }

    private void Notificar(string msg, string clase)
    {
        mensaje = msg;
        alertClase = clase;
    }
}